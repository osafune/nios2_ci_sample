
ci_test.elf:     file format elf32-littlenios2
ci_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000428 memsz 0x00000428 flags r-x
    LOAD off    0x00001448 vaddr 0x00000448 paddr 0x0000045c align 2**12
         filesz 0x00000014 memsz 0x00000014 flags rw-
    LOAD off    0x00001470 vaddr 0x00000470 paddr 0x00000470 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  0000145c  2**0
                  CONTENTS
  2 .text         000003f0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00000410  00000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000014  00000448  0000045c  00001448  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00000470  00000470  00001470  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000047c  0000047c  0000145c  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001b0  00000000  00000000  00001488  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000677a  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000176c  00000000  00000000  00007db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000017b4  00000000  00000000  0000951e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000021c  00000000  00000000  0000acd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c40  00000000  00000000  0000aef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000477  00000000  00000000  0000bb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000bfa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000138  00000000  00000000  0000bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000cfe8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000cfeb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000cff7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000cff8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000cff9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000cffd  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000d001  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000d005  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0000d01b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0000d026  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  0000d033  2**0
                  CONTENTS, READONLY
 29 .jdi          0000557c  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000410 l    d  .rodata	00000000 .rodata
00000448 l    d  .rwdata	00000000 .rwdata
00000470 l    d  .bss	00000000 .bss
0000047c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/PROJECT/temp/qiita/qsf/nios2_ci_sample/software/ci_test_bsp/obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000454 l     O .rwdata	00000004 x.1589
00000448 l     O .rwdata	00000004 w.1592
00000450 l     O .rwdata	00000004 y.1590
0000044c l     O .rwdata	00000004 z.1591
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000001a0 g     F .text	0000002c alt_main
0000045c g       *ABS*	00000000 __flash_rwdata_start
0000005c g     F .text	00000040 xorshift128
00000358 g     F .text	00000038 alt_putstr
000003ec g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000474 g     O .bss	00000004 alt_argv
00008448 g       *ABS*	00000000 _gp
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000047c g       *ABS*	00000000 __bss_end
000003e4 g     F .text	00000004 alt_dcache_flush_all
0000045c g       *ABS*	00000000 __ram_rwdata_end
00000448 g       *ABS*	00000000 __ram_rodata_end
00000458 g     O .rwdata	00000004 jtag_uart_0
0000047c g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000003b4 g     F .text	00000030 altera_avalon_jtag_uart_write
000001cc g     F .text	00000140 alt_printf
00000020 g     F .text	0000003c _start
000003b0 g     F .text	00000004 alt_sys_init
00000448 g       *ABS*	00000000 __ram_rwdata_start
00000410 g       *ABS*	00000000 __ram_rodata_start
0000047c g       *ABS*	00000000 __alt_stack_base
00000470 g       *ABS*	00000000 __bss_start
0000009c g     F .text	00000050 main
00000470 g     O .bss	00000004 alt_envp
00000410 g       *ABS*	00000000 __flash_rodata_start
00000390 g     F .text	00000020 alt_irq_init
00000478 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000045c g       *ABS*	00000000 _edata
0000047c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000003f4 g     F .text	0000001c strlen
0000030c g     F .text	0000004c alt_putchar
000003e8 g     F .text	00000004 alt_icache_flush_all
000000ec g     F .text	000000b4 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a11214 	ori	gp,gp,33864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10811c14 	ori	r2,r2,1136

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c11f14 	ori	r3,r3,1148

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000ec0 	call	ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001a00 	call	1a0 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <xorshift128>:
  static uint32_t y = 362436069;
  static uint32_t z = 521288629;
  static uint32_t w = 88675123; 
  uint32_t t;
 
  t = x ^ (x << 11);
  5c:	d0a00317 	ldw	r2,-32756(gp)
  x = y; y = z; z = w;
  60:	d1200017 	ldw	r4,-32768(gp)
  t = x ^ (x << 11);
  64:	100692fa 	slli	r3,r2,11
  68:	1886f03a 	xor	r3,r3,r2
  x = y; y = z; z = w;
  6c:	d0a00217 	ldw	r2,-32760(gp)
  70:	d0a00315 	stw	r2,-32756(gp)
  74:	d0a00117 	ldw	r2,-32764(gp)
  78:	d1200115 	stw	r4,-32764(gp)
  7c:	d0a00215 	stw	r2,-32760(gp)
  return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)); 
  80:	2004d4fa 	srli	r2,r4,19
  84:	1104f03a 	xor	r2,r2,r4
  88:	10c4f03a 	xor	r2,r2,r3
  8c:	1806d23a 	srli	r3,r3,8
  90:	10c4f03a 	xor	r2,r2,r3
  94:	d0a00015 	stw	r2,-32768(gp)
}
  98:	f800283a 	ret

0000009c <main>:

int main()
{ 
  9c:	defffc04 	addi	sp,sp,-16
  alt_putstr("Hello from Nios II!\n");
  a0:	01000034 	movhi	r4,0
{ 
  a4:	dc400115 	stw	r17,4(sp)
  alt_putstr("Hello from Nios II!\n");
  a8:	21010404 	addi	r4,r4,1040

  for (int i=0 ; i<10 ; i++) {
    uint32_t r1 = ALT_CI_CI_RAND_COMPONENT_0;
    uint32_t r2 = xorshift128();

    alt_printf("ci_rand=0x%x, func_rand=0x%x\n", r1, r2);
  ac:	04400034 	movhi	r17,0
{ 
  b0:	dc000015 	stw	r16,0(sp)
  b4:	dfc00315 	stw	ra,12(sp)
  b8:	dc800215 	stw	r18,8(sp)
  alt_putstr("Hello from Nios II!\n");
  bc:	04000284 	movi	r16,10
  c0:	00003580 	call	358 <alt_putstr>
    alt_printf("ci_rand=0x%x, func_rand=0x%x\n", r1, r2);
  c4:	8c410a04 	addi	r17,r17,1064
    uint32_t r1 = ALT_CI_CI_RAND_COMPONENT_0;
  c8:	0025c032 	custom	0,r18,zero,zero
    uint32_t r2 = xorshift128();
  cc:	000005c0 	call	5c <xorshift128>
    alt_printf("ci_rand=0x%x, func_rand=0x%x\n", r1, r2);
  d0:	100d883a 	mov	r6,r2
  d4:	900b883a 	mov	r5,r18
  d8:	8809883a 	mov	r4,r17
  dc:	843fffc4 	addi	r16,r16,-1
  e0:	00001cc0 	call	1cc <alt_printf>
  for (int i=0 ; i<10 ; i++) {
  e4:	803ff81e 	bne	r16,zero,c8 <main+0x2c>
  }

  while (1);
  e8:	003fff06 	br	e8 <main+0x4c>

000000ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  ec:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  f0:	00800034 	movhi	r2,0
  f4:	00c00034 	movhi	r3,0
  f8:	dfc00015 	stw	ra,0(sp)
  fc:	10811204 	addi	r2,r2,1096
 100:	18c11704 	addi	r3,r3,1116
 104:	10c00326 	beq	r2,r3,114 <alt_load+0x28>
  {
    while( to != end )
 108:	01000034 	movhi	r4,0
 10c:	21011704 	addi	r4,r4,1116
 110:	1100141e 	bne	r2,r4,164 <alt_load+0x78>
  if (to != from)
 114:	00800034 	movhi	r2,0
 118:	00c00034 	movhi	r3,0
 11c:	10800804 	addi	r2,r2,32
 120:	18c00804 	addi	r3,r3,32
 124:	10c00326 	beq	r2,r3,134 <alt_load+0x48>
    while( to != end )
 128:	01000034 	movhi	r4,0
 12c:	21000804 	addi	r4,r4,32
 130:	1100111e 	bne	r2,r4,178 <alt_load+0x8c>
  if (to != from)
 134:	00800034 	movhi	r2,0
 138:	00c00034 	movhi	r3,0
 13c:	10810404 	addi	r2,r2,1040
 140:	18c10404 	addi	r3,r3,1040
 144:	10c00326 	beq	r2,r3,154 <alt_load+0x68>
    while( to != end )
 148:	01000034 	movhi	r4,0
 14c:	21011204 	addi	r4,r4,1096
 150:	11000e1e 	bne	r2,r4,18c <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 154:	00003e40 	call	3e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 158:	dfc00017 	ldw	ra,0(sp)
 15c:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 160:	00003e81 	jmpi	3e8 <alt_icache_flush_all>
    {
      *to++ = *from++;
 164:	19400017 	ldw	r5,0(r3)
 168:	10800104 	addi	r2,r2,4
 16c:	18c00104 	addi	r3,r3,4
 170:	117fff15 	stw	r5,-4(r2)
 174:	003fe606 	br	110 <alt_load+0x24>
 178:	19400017 	ldw	r5,0(r3)
 17c:	10800104 	addi	r2,r2,4
 180:	18c00104 	addi	r3,r3,4
 184:	117fff15 	stw	r5,-4(r2)
 188:	003fe906 	br	130 <alt_load+0x44>
 18c:	19400017 	ldw	r5,0(r3)
 190:	10800104 	addi	r2,r2,4
 194:	18c00104 	addi	r3,r3,4
 198:	117fff15 	stw	r5,-4(r2)
 19c:	003fec06 	br	150 <alt_load+0x64>

000001a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1a0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1a4:	0009883a 	mov	r4,zero
{
 1a8:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 1ac:	00003900 	call	390 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1b0:	00003b00 	call	3b0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1b4:	d1a00a17 	ldw	r6,-32728(gp)
 1b8:	d1600b17 	ldw	r5,-32724(gp)
 1bc:	d1200c17 	ldw	r4,-32720(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1c0:	dfc00017 	ldw	ra,0(sp)
 1c4:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 1c8:	000009c1 	jmpi	9c <main>

000001cc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 1cc:	defff704 	addi	sp,sp,-36
 1d0:	2005883a 	mov	r2,r4
 1d4:	dfc00515 	stw	ra,20(sp)
 1d8:	dd000415 	stw	r20,16(sp)
 1dc:	dcc00315 	stw	r19,12(sp)
 1e0:	dc800215 	stw	r18,8(sp)
 1e4:	dc400115 	stw	r17,4(sp)
 1e8:	dc000015 	stw	r16,0(sp)
 1ec:	d9400615 	stw	r5,24(sp)
 1f0:	d9800715 	stw	r6,28(sp)
 1f4:	d9c00815 	stw	r7,32(sp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 1f8:	048003c4 	movi	r18,15
	va_start(args, fmt);
 1fc:	dc000604 	addi	r16,sp,24
    while ((c = *w++) != 0)
 200:	11000007 	ldb	r4,0(r2)
 204:	2000081e 	bne	r4,zero,228 <alt_printf+0x5c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 208:	dfc00517 	ldw	ra,20(sp)
 20c:	dd000417 	ldw	r20,16(sp)
 210:	dcc00317 	ldw	r19,12(sp)
 214:	dc800217 	ldw	r18,8(sp)
 218:	dc400117 	ldw	r17,4(sp)
 21c:	dc000017 	ldw	r16,0(sp)
 220:	dec00904 	addi	sp,sp,36
 224:	f800283a 	ret
        if (c != '%')
 228:	20c00960 	cmpeqi	r3,r4,37
 22c:	1800031e 	bne	r3,zero,23c <alt_printf+0x70>
    while ((c = *w++) != 0)
 230:	14c00044 	addi	r19,r2,1
                        alt_putchar('0');
 234:	000030c0 	call	30c <alt_putchar>
                        continue;
 238:	00000d06 	br	270 <alt_printf+0xa4>
            if ((c = *w++) != 0)
 23c:	14c00084 	addi	r19,r2,2
 240:	10800047 	ldb	r2,1(r2)
 244:	103ff026 	beq	r2,zero,208 <alt_printf+0x3c>
                if (c == '%')
 248:	10c00958 	cmpnei	r3,r2,37
 24c:	1800021e 	bne	r3,zero,258 <alt_printf+0x8c>
                    alt_putchar(c);
 250:	01000944 	movi	r4,37
 254:	003ff706 	br	234 <alt_printf+0x68>
                else if (c == 'c')
 258:	10c018d8 	cmpnei	r3,r2,99
 25c:	1800061e 	bne	r3,zero,278 <alt_printf+0xac>
                    alt_putchar(v);
 260:	81000017 	ldw	r4,0(r16)
                    int v = va_arg(args, int);
 264:	84400104 	addi	r17,r16,4
 268:	8821883a 	mov	r16,r17
                    alt_putchar(v);
 26c:	000030c0 	call	30c <alt_putchar>
                    int v = va_arg(args, int);
 270:	9805883a 	mov	r2,r19
 274:	003fe206 	br	200 <alt_printf+0x34>
                else if (c == 'x')
 278:	10c01e18 	cmpnei	r3,r2,120
 27c:	18001a1e 	bne	r3,zero,2e8 <alt_printf+0x11c>
                    unsigned long v = va_arg(args, unsigned long);
 280:	85000017 	ldw	r20,0(r16)
 284:	84000104 	addi	r16,r16,4
                    if (v == 0)
 288:	a000131e 	bne	r20,zero,2d8 <alt_printf+0x10c>
                        alt_putchar('0');
 28c:	01000c04 	movi	r4,48
 290:	003fe806 	br	234 <alt_printf+0x68>
                        digit_shift -= 4;
 294:	8c7fff04 	addi	r17,r17,-4
                    while (!(v & (0xF << digit_shift)))
 298:	9444983a 	sll	r2,r18,r17
 29c:	1504703a 	and	r2,r2,r20
 2a0:	103ffc26 	beq	r2,zero,294 <alt_printf+0xc8>
                    for (; digit_shift >= 0; digit_shift -= 4)
 2a4:	883ff216 	blt	r17,zero,270 <alt_printf+0xa4>
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 2a8:	9448983a 	sll	r4,r18,r17
 2ac:	2508703a 	and	r4,r4,r20
 2b0:	2448d83a 	srl	r4,r4,r17
                        if (digit <= 9)
 2b4:	208002a8 	cmpgeui	r2,r4,10
 2b8:	1000091e 	bne	r2,zero,2e0 <alt_printf+0x114>
                            c = '0' + digit;
 2bc:	21000c04 	addi	r4,r4,48
                        alt_putchar(c);
 2c0:	21003fcc 	andi	r4,r4,255
 2c4:	2100201c 	xori	r4,r4,128
 2c8:	213fe004 	addi	r4,r4,-128
 2cc:	000030c0 	call	30c <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
 2d0:	8c7fff04 	addi	r17,r17,-4
 2d4:	003ff306 	br	2a4 <alt_printf+0xd8>
                    digit_shift = 28;
 2d8:	04400704 	movi	r17,28
 2dc:	003fee06 	br	298 <alt_printf+0xcc>
                            c = 'a' + digit - 10;
 2e0:	210015c4 	addi	r4,r4,87
 2e4:	003ff606 	br	2c0 <alt_printf+0xf4>
                else if (c == 's')
 2e8:	10801cd8 	cmpnei	r2,r2,115
 2ec:	103fe01e 	bne	r2,zero,270 <alt_printf+0xa4>
                    char *s = va_arg(args, char *);
 2f0:	84400017 	ldw	r17,0(r16)
 2f4:	84000104 	addi	r16,r16,4
                    while(*s)
 2f8:	89000007 	ldb	r4,0(r17)
 2fc:	203fdc26 	beq	r4,zero,270 <alt_printf+0xa4>
                      alt_putchar(*s++);
 300:	8c400044 	addi	r17,r17,1
 304:	000030c0 	call	30c <alt_putchar>
 308:	003ffb06 	br	2f8 <alt_printf+0x12c>

0000030c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 30c:	defffd04 	addi	sp,sp,-12
 310:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 314:	d90000c5 	stb	r4,3(sp)
{
 318:	2021883a 	mov	r16,r4

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 31c:	01000034 	movhi	r4,0
 320:	000f883a 	mov	r7,zero
 324:	01800044 	movi	r6,1
 328:	d94000c4 	addi	r5,sp,3
 32c:	21011604 	addi	r4,r4,1112
{
 330:	dfc00215 	stw	ra,8(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 334:	00003b40 	call	3b4 <altera_avalon_jtag_uart_write>
 338:	10bfffd8 	cmpnei	r2,r2,-1
 33c:	1000011e 	bne	r2,zero,344 <alt_putchar+0x38>
        return -1;
 340:	043fffc4 	movi	r16,-1
    return c;
#else
    return putchar(c);
#endif
#endif
}
 344:	8005883a 	mov	r2,r16
 348:	dfc00217 	ldw	ra,8(sp)
 34c:	dc000117 	ldw	r16,4(sp)
 350:	dec00304 	addi	sp,sp,12
 354:	f800283a 	ret

00000358 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 358:	defffe04 	addi	sp,sp,-8
 35c:	dc000015 	stw	r16,0(sp)
 360:	dfc00115 	stw	ra,4(sp)
 364:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 368:	00003f40 	call	3f4 <strlen>
 36c:	01000034 	movhi	r4,0
 370:	000f883a 	mov	r7,zero
 374:	100d883a 	mov	r6,r2
 378:	800b883a 	mov	r5,r16
 37c:	21011604 	addi	r4,r4,1112
#else
    return fputs(str, stdout);
#endif
#endif
}
 380:	dfc00117 	ldw	ra,4(sp)
 384:	dc000017 	ldw	r16,0(sp)
 388:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 38c:	00003b41 	jmpi	3b4 <altera_avalon_jtag_uart_write>

00000390 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 390:	deffff04 	addi	sp,sp,-4
 394:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 398:	00003ec0 	call	3ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 39c:	00800044 	movi	r2,1
 3a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 3a4:	dfc00017 	ldw	ra,0(sp)
 3a8:	dec00104 	addi	sp,sp,4
 3ac:	f800283a 	ret

000003b0 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
 3b0:	f800283a 	ret

000003b4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 3b4:	21000017 	ldw	r4,0(r4)
{
 3b8:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
 3bc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 3c0:	29800136 	bltu	r5,r6,3c8 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 3c4:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 3c8:	20c00137 	ldwio	r3,4(r4)
 3cc:	18ffffec 	andhi	r3,r3,65535
 3d0:	183ffb26 	beq	r3,zero,3c0 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 3d4:	28c00007 	ldb	r3,0(r5)
 3d8:	29400044 	addi	r5,r5,1
 3dc:	20c00035 	stwio	r3,0(r4)
 3e0:	003ff706 	br	3c0 <altera_avalon_jtag_uart_write+0xc>

000003e4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 3e4:	f800283a 	ret

000003e8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 3e8:	f800283a 	ret

000003ec <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 3ec:	000170fa 	wrctl	ienable,zero
}
 3f0:	f800283a 	ret

000003f4 <strlen>:
 3f4:	2005883a 	mov	r2,r4
 3f8:	10c00007 	ldb	r3,0(r2)
 3fc:	1800021e 	bne	r3,zero,408 <strlen+0x14>
 400:	1105c83a 	sub	r2,r2,r4
 404:	f800283a 	ret
 408:	10800044 	addi	r2,r2,1
 40c:	003ffa06 	br	3f8 <strlen+0x4>
